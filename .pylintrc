# Pylint configuration file based on Google Python Style Guide
# Derived from user-provided base configuration.

[MAIN]

# Files or directories to be skipped. They should be base names, not paths.
# Add things like virtualenv directories here if needed (e.g., venv, .venv, env)
ignore=CVS

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins to load.
load-plugins=
    pylint.extensions.check_elif,
    pylint.extensions.bad_builtin,
    pylint.extensions.docparams,
    pylint.extensions.for_any_all,
    pylint.extensions.set_membership,
    pylint.extensions.code_style,
    pylint.extensions.overlapping_exceptions,
    pylint.extensions.typing,
    pylint.extensions.redefined_variable_type,
    pylint.extensions.comparison_placement,
    pylint.extensions.broad_try_clause,
    pylint.extensions.dict_init_mutate,
    pylint.extensions.consider_refactoring_into_while_condition,

# Use multiple processes to speed up Pylint. 0 = auto-detect.
jobs=0

# Minimum supported python version
py-version = 3.9.0

# Specify a score threshold under which the program will exit with error.
fail-under=9.0 # Adjusted slightly lower, 10.0 is very strict.

# Return non-zero exit code if any of these messages/categories are detected.
# Useful for blocking fatal/error messages even if score is high.
# fail-on=E,F


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s).
enable=
    use-symbolic-message-instead,
    useless-suppression

# Disable the message, report, category or checker with the given id(s).
disable=
    # User provided disables:
    attribute-defined-outside-init, # Google prefers init, but can be noisy
    protected-access, # Google discourages, but might be needed sometimes
    too-few-public-methods,
    format, # Often handled by black/yapf
    fixme, # Google uses TODO
    consider-using-assignment-expr, # Walrus operator style is subjective
    # Common disables that can conflict with formatters or be noisy:
    bad-continuation,
    bad-whitespace,
    # Disables often useful in practice:
    too-many-locals, # Handled by [DESIGN] max-locals, but can be disabled if preferred
    too-many-arguments, # Handled by [DESIGN] max-args
    too-many-statements, # Handled by [DESIGN] max-statements
    too-many-branches, # Handled by [DESIGN] max-branches
    too-many-return-statements, # Handled by [DESIGN] max-returns
    too-many-instance-attributes, # Handled by [DESIGN] max-attributes
    logging-fstring-interpolation, # Allow f-strings in logging
    unnecessary-lambda, # Sometimes lambdas improve readability slightly
    multiple-statements, # Let formatters handle this
    import-outside-toplevel, # Sometimes necessary
    # Keep missing-docstring ENABLED (by not disabling it) for Google style


[REPORTS]

# Set the output format.
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Python expression for score calculation.
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# Activate the evaluation score.
score=yes


[LOGGING]

# Logging modules to check.
logging-modules=logging

# The type of string formatting that logging methods do.
logging-format-style=old


[MISCELLANEOUS]

# List of note tags to take in consideration. Google standard.
notes=TODO

# Regular expression of note tags to take in consideration.
#notes-rgx=


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=6

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=yes


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of additional names supposed to be defined in builtins.
# additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins
# allowed-redefined-builtins=


[FORMAT]

# Maximum number of characters on a single line. Google standard = 80.
max-line-length=80

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$|\W*#\s+noqa[:]?\s+\w\d{3,4}\W*

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no

# Allow the body of a class to be on the same line as the declaration.
single-line-class-stmt=no

# Maximum number of lines in a module. Increased slightly from default.
max-module-lines=1500

# String used as indentation unit. Google standard = 4 spaces.
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format=


[BASIC]

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,err,Run,_,fh

# Good variable names regexes, separated by a comma.
# good-names-rgxs=

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Naming style matching correct function names. Google: snake_case
function-naming-style=snake_case
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming style matching correct variable names. Google: snake_case
variable-naming-style=snake_case
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming style matching correct constant names. Google: UPPER_CASE
const-naming-style=UPPER_CASE
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Naming style matching correct attribute names. Google: snake_case
attr-naming-style=snake_case
attr-rgx=[a-z_][a-z0-9_]{2,}$

# Naming style matching correct argument names. Google: snake_case
argument-naming-style=snake_case
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming style matching correct class attribute names. Google: snake_case
class-attribute-naming-style=snake_case
class-attribute-rgx=([a-z_][a-z0-9_]{2,30}|(__.*__))$

# Naming style matching correct class constant names. Google: UPPER_CASE
class-const-naming-style=UPPER_CASE
class-const-rgx=([A-Z_][A-Z0-9_]*|(__.*__))$

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Naming style matching correct class names. Google: PascalCase
class-naming-style=PascalCase
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Naming style matching correct module names. Google: snake_case
module-naming-style=snake_case
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$ # Allow PascalCase if needed? Keep strict snake_case: ^[a-z_][a-z0-9_]*$
# module-rgx=^[a-z_][a-z0-9_]*$ # Use this for strict snake_case modules

# Naming style matching correct method names. Google: snake_case
method-naming-style=snake_case
method-rgx=[a-z_][a-z0-9_]{2,}$

# Regular expression which should only match function or class names that do
# not require a docstring. Google requires docstrings for almost everything.
# Keeping __.*__ exempts dunder methods (like __repr__), which is reasonable.
no-docstring-rgx=^(_|__.*__)$

# Minimum line length for functions/classes that require docstrings. -1 = always required.
docstring-min-length=-1


[TYPECHECK]

# List of module names for which member attributes should not be checked.
# ignored-modules=

# List of class names for which member attributes should not be checked.
ignored-classes=SQLObject, optparse.Values, thread._local, _thread._local, argparse.Namespace

# List of members which are set dynamically and missed by pylint inference system.
# generated-members=REQUEST,acl_users,aq_parent

# Tells whether to warn about missing members when the owner is inferred to be None.
ignore-none=yes

# Show a hint with possible names when a member name was not found.
missing-member-hint=yes


[SPELLING]

# Spelling dictionary name. Needs pyenchant installed.
# spelling-dict=en_US

# List of comma separated words that should not be checked.
spelling-ignore-words=

# List of comma separated words that should be considered directives.
spelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pragma:,pylint:

# Path to a file containing a private dictionary; one word per line.
# spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary.
# spelling-store-unknown-words=no


[DESIGN]

# Maximum number of arguments for function / method. Google prefers fewer.
max-args=5

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of statements in function / method body. Google prefers short functions.
max-statements=40

# Maximum number of attributes for a class.
max-attributes=7

# Maximum number of statements in a try-block.
max-try-statements=5

# Maximum number of positional arguments.
max-positional-arguments=5


[CLASSES]

# List of method names used to declare instance attributes.
defining-attr-methods=__init__,__new__,setUp,__post_init__

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names excluded from the protected access warning.
# exclude-protected=_asdict,_fields,_replace,_source,_make

# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods=no


[IMPORTS]

# Allow wildcard imports from modules that define __all__. Google discourages wildcards.
allow-wildcard-with-all=no

# Deprecated modules which should not be used.
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Force import order to recognize a module as part of the standard library.
# known-standard-library=

# Force import order to recognize a module as part of a third party library.
# known-third-party=enchant

# Couples of modules and preferred modules.
# preferred-modules=


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught.
overgeneral-exceptions=builtins.Exception, builtins.BaseException


[TYPING]

# Set to ``no`` if runtime introspection of type annotations is not required.
runtime-typing = yes # Google often uses types at runtime (e.g. protobufs)


[DEPRECATED_BUILTINS]

# List of builtins function names that should not be used. Google discourages map/filter.
bad-functions=map,filter


[REFACTORING]

# Maximum number of nested blocks for function / method body.
max-nested-blocks=4

# Complete name of functions that never returns.
never-returning-functions=sys.exit, os._exit, Abort # Add others if needed


[STRING]

# Check for inconsistent quote usage. Google requires consistency.
check-quote-consistency=yes

# Check for implicit string concatenation on sequences defined over several lines.
check-str-concat-over-line-jumps=no


[CODE_STYLE]

# Max line length for which to still emit suggestions.
max-line-length-suggestions=80